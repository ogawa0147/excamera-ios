//
//  Resolver.swift
//  Generated by dikitgen.
//

import ARKit
import AVFoundation
import Cartography
import DIKit
import Firebase
import Foundation
import ImageIO
import MobileCoreServices
import Photos
import UIKit

extension AppResolver {

    func resolveARCameraNavigatorImpl(navigationController: UINavigationController) -> ARCameraNavigatorImpl {
        let appResolver = resolveAppResolver()
        return ARCameraNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveARCameraViewController(navigator: ARCameraNavigator) -> ARCameraViewController {
        let appResolver = resolveAppResolver()
        let arCameraViewModel = resolveARCameraViewModel(navigator: navigator)
        return ARCameraViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: arCameraViewModel))
    }

    func resolveARCameraViewModel(navigator: ARCameraNavigator) -> ARCameraViewModel {
        return ARCameraViewModel(dependency: .init(navigator: navigator))
    }

    func resolveAppResolver() -> AppResolver {
        return provideResolver()
    }

    func resolveCameraEffectNavigatorImpl(navigationController: UINavigationController) -> CameraEffectNavigatorImpl {
        let appResolver = resolveAppResolver()
        return CameraEffectNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveCameraEffectViewController(navigator: CameraEffectNavigator) -> CameraEffectViewController {
        let appResolver = resolveAppResolver()
        let cameraEffectViewModel = resolveCameraEffectViewModel(navigator: navigator)
        return CameraEffectViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: cameraEffectViewModel))
    }

    func resolveCameraEffectViewModel(navigator: CameraEffectNavigator) -> CameraEffectViewModel {
        return CameraEffectViewModel(dependency: .init(navigator: navigator))
    }

    func resolveCameraFilterNavigatorImpl(navigationController: UINavigationController) -> CameraFilterNavigatorImpl {
        let appResolver = resolveAppResolver()
        return CameraFilterNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveCameraFilterViewController(navigator: CameraFilterNavigator) -> CameraFilterViewController {
        let appResolver = resolveAppResolver()
        let cameraFilterViewModel = resolveCameraFilterViewModel(navigator: navigator)
        return CameraFilterViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: cameraFilterViewModel))
    }

    func resolveCameraFilterViewModel(navigator: CameraFilterNavigator) -> CameraFilterViewModel {
        return CameraFilterViewModel(dependency: .init(navigator: navigator))
    }

    func resolveCameraGifNavigatorImpl(navigationController: UINavigationController) -> CameraGifNavigatorImpl {
        let appResolver = resolveAppResolver()
        return CameraGifNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveCameraGifViewController(navigator: CameraGifNavigator) -> CameraGifViewController {
        let appResolver = resolveAppResolver()
        let cameraGifViewModel = resolveCameraGifViewModel(navigator: navigator)
        return CameraGifViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: cameraGifViewModel))
    }

    func resolveCameraGifViewModel(navigator: CameraGifNavigator) -> CameraGifViewModel {
        return CameraGifViewModel(dependency: .init(navigator: navigator))
    }

    func resolveCameraVisionNavigatorImpl(navigationController: UINavigationController) -> CameraVisionNavigatorImpl {
        let appResolver = resolveAppResolver()
        return CameraVisionNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveCameraVisionViewController(navigator: CameraVisionNavigator) -> CameraVisionViewController {
        let appResolver = resolveAppResolver()
        let cameraVisionViewModel = resolveCameraVisionViewModel(navigator: navigator)
        return CameraVisionViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: cameraVisionViewModel))
    }

    func resolveCameraVisionViewModel(navigator: CameraVisionNavigator) -> CameraVisionViewModel {
        return CameraVisionViewModel(dependency: .init(navigator: navigator))
    }

    func resolveMLVisionNavigatorImpl(navigationController: UINavigationController) -> MLVisionNavigatorImpl {
        let appResolver = resolveAppResolver()
        return MLVisionNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveMLVisionViewController(navigator: MLVisionNavigator) -> MLVisionViewController {
        let appResolver = resolveAppResolver()
        let mlVisionViewModel = resolveMLVisionViewModel(navigator: navigator)
        return MLVisionViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: mlVisionViewModel))
    }

    func resolveMLVisionViewModel(navigator: MLVisionNavigator) -> MLVisionViewModel {
        return MLVisionViewModel(dependency: .init(navigator: navigator))
    }

    func resolvePlayerNavigatorImpl(navigationController: UINavigationController) -> PlayerNavigatorImpl {
        let appResolver = resolveAppResolver()
        return PlayerNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolvePlayerViewController(navigator: PlayerNavigator, url: URL) -> PlayerViewController {
        let appResolver = resolveAppResolver()
        let playerViewModel = resolvePlayerViewModel(navigator: navigator, url: url)
        return PlayerViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: playerViewModel))
    }

    func resolvePlayerViewModel(navigator: PlayerNavigator, url: URL) -> PlayerViewModel {
        return PlayerViewModel(dependency: .init(navigator: navigator, url: url))
    }

    func resolveTopPageNavigatorImpl(navigationController: UINavigationController) -> TopPageNavigatorImpl {
        let appResolver = resolveAppResolver()
        return TopPageNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveTopPageViewController(navigator: TopPageNavigator) -> TopPageViewController {
        let appResolver = resolveAppResolver()
        let topPageViewModel = resolveTopPageViewModel(navigator: navigator)
        return TopPageViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: topPageViewModel))
    }

    func resolveTopPageViewModel(navigator: TopPageNavigator) -> TopPageViewModel {
        return TopPageViewModel(dependency: .init(navigator: navigator))
    }

    func resolveVideoNavigatorImpl(navigationController: UINavigationController) -> VideoNavigatorImpl {
        let appResolver = resolveAppResolver()
        return VideoNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveVideoViewController(navigator: VideoNavigator) -> VideoViewController {
        let appResolver = resolveAppResolver()
        let videoViewModel = resolveVideoViewModel(navigator: navigator)
        return VideoViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: videoViewModel))
    }

    func resolveVideoViewModel(navigator: VideoNavigator) -> VideoViewModel {
        return VideoViewModel(dependency: .init(navigator: navigator))
    }

    func resolveWallPaperNavigatorImpl(navigationController: UINavigationController) -> WallPaperNavigatorImpl {
        let appResolver = resolveAppResolver()
        return WallPaperNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveWallPaperViewController(navigator: WallPaperNavigator) -> WallPaperViewController {
        let appResolver = resolveAppResolver()
        let wallPaperViewModel = resolveWallPaperViewModel(navigator: navigator)
        return WallPaperViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: wallPaperViewModel))
    }

    func resolveWallPaperViewModel(navigator: WallPaperNavigator) -> WallPaperViewModel {
        return WallPaperViewModel(dependency: .init(navigator: navigator))
    }

    func resolveYoutubePlayerNavigatorImpl(navigationController: UINavigationController) -> YoutubePlayerNavigatorImpl {
        let appResolver = resolveAppResolver()
        return YoutubePlayerNavigatorImpl(dependency: .init(resolver: appResolver, navigationController: navigationController))
    }

    func resolveYoutubePlayerViewController(navigator: YoutubePlayerNavigator) -> YoutubePlayerViewController {
        let appResolver = resolveAppResolver()
        let youtubePlayerViewModel = resolveYoutubePlayerViewModel(navigator: navigator)
        return YoutubePlayerViewController.makeInstance(dependency: .init(resolver: appResolver, viewModel: youtubePlayerViewModel))
    }

    func resolveYoutubePlayerViewModel(navigator: YoutubePlayerNavigator) -> YoutubePlayerViewModel {
        return YoutubePlayerViewModel(dependency: .init(navigator: navigator))
    }

}

