default_platform :ios

fastlane_require 'dotenv'

platform :ios do

  before_all do
    Dotenv.overload '../.env.secret'
  end

  after_all do |lane|
  end

  error do |lane, exception|
    print_error(exception)
  end

  # e.g) bundle exec fastlane ios bootstrap
  desc "Setup for development"
  lane :bootstrap do
    setup_project
  end

  # e.g) bundle exec fastlane ios distribute
  desc "Submit a new Beta Build to App Distribution"
  lane :distribute do
      begin
        distribution_for_dev_app
        post_to_slack
      rescue => error
        print_error(error)
        post_to_slack(message: error.message, success: false)
      end
  end

  # e.g) bundle exec fastlane ios certificates
  # bundle exec fastlane match development --force
  desc "Sync certificates and profiles across team using git"
  lane :certificates do
    match(app_identifier: 'jp.excamera', type: 'development', readonly: true)
    match(app_identifier: 'jp.excamera', type: 'appstore', readonly: true)
  end

  # e.g) bundle exec fastlane ios versions
  desc "Show current command version"
  lane :versions do
    sh 'cd .. && ruby --version'
    sh 'cd .. && swiftgen --version'
    sh 'cd .. && xcodegen version'
    sh 'cd .. && bundle --version'
    sh 'cd .. && carthage version'
    sh 'cd .. && pod --version'
    sh 'cd .. && swiftlint version'
  end

  def setup_project
    sh 'cd .. && swiftgen'
    sh 'cd .. && xcodegen'

    cocoapods

    carthage(
      command: 'build',
      platform: 'iOS',
      cache_builds: true,
      use_binaries: false
    )
  end

  # Submit a new Development Build to App Distribution
  def distribution_for_dev_app
    match(app_identifier: 'jp.excamera', type: 'development', readonly: true)
    gym(scheme: 'Development', export_method: 'development', export_options: { compileBitcode: false })
    release_notes = changelog_from_git_commits(pretty: '%h %s')
    firebase_app_distribution(app: ENV['GOOGLE_APP_ID'], groups: ENV['FIREBASE_APP_DISTRIBUTION_GROUP'], release_notes: release_notes)
    clean_build_artifacts
  end

  def post_to_slack(message: "", success: true)
    slack(
      message: message,
      channel: ENV['SLACK_CHANNEL'],
      slack_url: ENV['SLACK_URL'],
      success: success
    )
  end

  def print_error(error)
    print "\e[31m"
    puts error
    print "\e[0m"
  end

end